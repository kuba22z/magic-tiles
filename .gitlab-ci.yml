#
# Author: Pierre Dahmani
# Created: 28.04.2021
#
# Description: creates pipelines for the magic-tiles repository.
#
# base file copied and adapted from:
# https://gitlab.com/SystemSlayerOfficial/gitlab-ci-series/-/blob/Gitlab_CI_Series_EP03/.gitlab-ci.yml


# stages in the order we are going through them
stages:
  - build
  - test
  - deploy

# these can be accessed at every job
# $DOCKER_VERSION is a project specific deployment variable.
variables:
    DOCKER_COMPOSE: $CI_REGISTRY_IMAGE/docker-compose:$DOCKER_VERSION
    DOCKER_DIND: $CI_REGSITRY_IMAGE/docker:$DOCKER_VERSION-dind

# Makes sure we cache the results from our build step. This cache will be used
# by all jobs in this pipeline.
cache:
  key: client-build-cache
  paths:
    - nuxt-client/node_modules
    - nuxt-client/.nuxt
    - nuxt-client/.cache

# will be run before any job that does not have before_script specified.
before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

# will be run after any job that does not have after_script specified.
after_script:
  - docker logout "$CI_REGISTRY_USER"


# builds the client
build:

  image: $DOCKER_COMPOSE

  services:
    - $DOCKER_DIND

  stage: build

  # builds image and pushes the image to the gitlab docker registry
  # https://docs.gitlab.com/ee/user/packages/container_registry/
  script:
    - echo "CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE" >> .env
    - docker-compose build --no-cache
    - docker-compose run nuxt-client /pipeline-scripts/build.sh
    - docker push "$CI_REGISTRY_IMAGE:latest"


# runs e2e tests with cypress
test:e2e:

  image: $DOCKER_COMPOSE

  services:
      - $DOCKER_DIND

  stage: test

  # makes sure tests are ran sequentially instead of concurrently.
  # concurrent execution did lead to errors with the docker registry.
  resource_group: test

  script:
      - docker pull "$CI_REGISTRY_IMAGE:latest"
      - docker-compose run nuxt-client /pipeline-scripts/test-e2e.sh


# runs bdd unit tests with moccha && chai
test:unit:

  image: $DOCKER_COMPOSE

  services:
      - $DOCKER_DIND

  stage: test

  # makes sure tests are ran sequentially instead of concurrently.
  # concurrent execution did lead to errors with the docker registry.
  resource_group: test

  script:
      - docker pull "$CI_REGISTRY_IMAGE:latest"
      # invokes a mocked test script. TODO(pierre): create tests and run them
      # here
      - docker-compose run nuxt-client /pipeline-scripts/test-unit.sh


# copies/deploys files to the deploy dir
deploy:

  image: $DOCKER_COMPOSE

  services:
      - $DOCKER_DIND

  stage: deploy

  rules:
    # runs job if on master or develop branch.
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "development"
    # runs job if "CI_STAGING_1" or "CI_STAGING_2" is written in commit.
    - if: $CI_COMMIT_MESSAGE =~ /CI_STAGING_1/ || $CI_COMMIT_MESSAGE =~ /CI_STAGING_2/

  script:
      - docker pull "$CI_REGISTRY_IMAGE:latest"
      - docker-compose run nuxt-client /pipeline-scripts/deploy.sh "$DOCKER_ENV_CI_COMMIT_BRANCH" "$DOCKER_ENV_CI_COMMIT_MESSAGE" "$DOCKER_ENV_CI_PROJECT_NAME"

